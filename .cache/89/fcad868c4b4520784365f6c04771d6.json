{"id":"../node_modules/@thi.ng/api/assert.js","dependencies":[{"name":"C:\\Users\\logan\\Projects\\thi-ng\\examples\\package.json","includedInParent":true,"mtime":1568643021473},{"name":"C:\\Users\\logan\\Projects\\thi-ng\\examples\\node_modules\\@thi.ng\\api\\package.json","includedInParent":true,"mtime":1568641996020},{"name":"./api","loc":{"line":1,"column":22},"parent":"C:\\Users\\logan\\Projects\\thi-ng\\examples\\node_modules\\@thi.ng\\api\\assert.js","resolved":"C:\\Users\\logan\\Projects\\thi-ng\\examples\\node_modules\\@thi.ng\\api\\api.js"},{"name":"process","parent":"C:\\Users\\logan\\Projects\\thi-ng\\examples\\node_modules\\@thi.ng\\api\\assert.js","resolved":"C:\\Users\\logan\\AppData\\Local\\nvs\\node\\10.16.2\\x64\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"}],"generated":{"js":"var process = require(\"process\");\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assert = void 0;\n\nvar _api = require(\"./api\");\n\n/**\n * Takes a `test` result or predicate function without args and throws\n * error with given `msg` if test failed (i.e. is falsy). The function\n * is only enabled if `NODE_ENV != \"production\"` or if\n * `UMBRELLA_ASSERTS = 1`.\n */\nvar assert = typeof process === \"undefined\" || \"development\" !== \"production\" || undefined === \"1\" ? function (test) {\n  var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"assertion failed\";\n\n  if (typeof test === \"function\" && !test() || !test) {\n    throw new Error(typeof msg === \"function\" ? msg() : msg);\n  }\n} : _api.NO_OP;\nexports.assert = assert;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":9,"column":0},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":1,"column":0}},{"generated":{"line":11,"column":0},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":2,"column":0}},{"generated":{"line":17,"column":0},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":8,"column":7}},{"name":"assert","generated":{"line":17,"column":4},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":8,"column":13}},{"generated":{"line":17,"column":10},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":8,"column":19}},{"generated":{"line":17,"column":13},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":8,"column":22}},{"name":"process","generated":{"line":17,"column":20},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":8,"column":29}},{"generated":{"line":17,"column":27},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":8,"column":22}},{"generated":{"line":17,"column":32},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":8,"column":41}},{"generated":{"line":17,"column":43},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":8,"column":22}},{"generated":{"line":17,"column":47},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":9,"column":4}},{"generated":{"line":17,"column":65},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":9,"column":29}},{"generated":{"line":17,"column":77},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":8,"column":22}},{"generated":{"line":17,"column":81},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":10,"column":4}},{"generated":{"line":17,"column":95},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":10,"column":37}},{"generated":{"line":17,"column":98},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":8,"column":22}},{"generated":{"line":17,"column":101},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":11,"column":6}},{"name":"test","generated":{"line":17,"column":111},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":11,"column":7}},{"generated":{"line":17,"column":115},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":11,"column":6}},{"generated":{"line":17,"column":117},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":11,"column":42}},{"generated":{"line":18,"column":0},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":11,"column":42}},{"name":"msg","generated":{"line":18,"column":6},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":11,"column":13}},{"generated":{"line":18,"column":9},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":11,"column":42}},{"generated":{"line":18,"column":80},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":11,"column":19}},{"generated":{"line":18,"column":98},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":11,"column":42}},{"generated":{"line":20,"column":0},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":12,"column":8}},{"generated":{"line":20,"column":6},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":12,"column":13}},{"name":"test","generated":{"line":20,"column":13},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":12,"column":20}},{"generated":{"line":20,"column":17},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":12,"column":13}},{"generated":{"line":20,"column":22},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":12,"column":29}},{"generated":{"line":20,"column":32},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":12,"column":13}},{"generated":{"line":20,"column":36},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":12,"column":43}},{"name":"test","generated":{"line":20,"column":37},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":12,"column":44}},{"generated":{"line":20,"column":41},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":12,"column":48}},{"generated":{"line":20,"column":43},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":12,"column":12}},{"generated":{"line":20,"column":47},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":12,"column":55}},{"name":"test","generated":{"line":20,"column":48},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":12,"column":56}},{"generated":{"line":20,"column":52},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":12,"column":8}},{"generated":{"line":20,"column":54},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":12,"column":62}},{"generated":{"line":21,"column":0},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":12}},{"generated":{"line":21,"column":10},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":18}},{"name":"Error","generated":{"line":21,"column":14},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":22}},{"generated":{"line":21,"column":19},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":18}},{"generated":{"line":21,"column":20},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":28}},{"name":"msg","generated":{"line":21,"column":27},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":35}},{"generated":{"line":21,"column":30},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":28}},{"generated":{"line":21,"column":35},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":43}},{"generated":{"line":21,"column":45},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":28}},{"name":"msg","generated":{"line":21,"column":48},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":56}},{"generated":{"line":21,"column":51},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":59}},{"generated":{"line":21,"column":53},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":28}},{"name":"msg","generated":{"line":21,"column":56},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":64}},{"generated":{"line":21,"column":59},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":18}},{"generated":{"line":21,"column":60},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":13,"column":12}},{"generated":{"line":22,"column":0},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":14,"column":9}},{"generated":{"line":23,"column":0},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":15,"column":5}},{"generated":{"line":23,"column":1},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":8,"column":22}},{"name":"NO_OP","generated":{"line":23,"column":4},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":16,"column":6}},{"generated":{"line":23,"column":14},"source":"../node_modules/@thi.ng/api/assert.js","original":{"line":8,"column":7}}],"sources":{"../node_modules/@thi.ng/api/assert.js":"import { NO_OP } from \"./api\";\n/**\n * Takes a `test` result or predicate function without args and throws\n * error with given `msg` if test failed (i.e. is falsy). The function\n * is only enabled if `NODE_ENV != \"production\"` or if\n * `UMBRELLA_ASSERTS = 1`.\n */\nexport const assert = typeof process === \"undefined\" ||\n    process.env.NODE_ENV !== \"production\" ||\n    process.env.UMBRELLA_ASSERTS === \"1\"\n    ? (test, msg = \"assertion failed\") => {\n        if ((typeof test === \"function\" && !test()) || !test) {\n            throw new Error(typeof msg === \"function\" ? msg() : msg);\n        }\n    }\n    : NO_OP;\n"},"lineCount":null}},"error":null,"hash":"6a1465b4925b7513892a56e4544c1a1d","cacheData":{"env":{"NODE_ENV":"development"}}}